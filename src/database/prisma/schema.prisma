datasource db {
  provider = "mysql"
  url      = env("DATABASESERVER")
}

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id                  String               @id @default(cuid())
  mail                String               @unique
  firstname           String
  lastname            String
  password            String
  role                Role                 @relation(fields: [roleId], references: [id])
  roleId              Int
  released            Boolean              @default(true)
  teachingInformation TeachingInformation?
  socialMedia         SocialMedia?
  skillsToTeach       Skill[]
  profilePictureName  String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model TeachingInformation {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  teachesOnline   Boolean  @default(false)
  teachesInPerson Boolean  @default(false)
  teachingCity    String?
  teachingCountry String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SocialMedia {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  xName         String?
  instagramName String?
  discordName   String?
  facebookName  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  user        User[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SkillCategory {
  id        Int      @id @default(autoincrement())
  name      String
  skills    Skill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id              Int           @id @default(autoincrement())
  name            String
  skillCategory   SkillCategory @relation(fields: [skillCategoryId], references: [id])
  skillCategoryId Int
  userWhoTeach    User[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
